import asyncio
import json
import logging
import os
import schedule
import time
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional

from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters
from telegram.error import TelegramError

from config import CONFIG
from gigachat_client import GigaChatClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramSummaryBot:
    def __init__(self):
        self.config = CONFIG
        self.bot_token = self.config["token"]["telegram"]
        self.groups_config = self.config.get("groups", [])
        self.max_messages = self.config["bot"]["max_messages_per_group"]
        self.summary_time = self.config["bot"]["summary_time"]
        self.language = self.config["bot"]["summary_language"]
        
        self.messages_storage: Dict[int, Dict[int, List[Dict]]] = {}
        self.groups_dict = {group["id"]: group for group in self.groups_config}
        self.giga_client = GigaChatClient()
        self.application = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–∑ JSON –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.load_history_from_file()

    def load_history_from_file(self, filename: str = 'history.json') -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                total = 0
                for chat_id_str, topics in data.items():
                    chat_id = int(chat_id_str)
                    self.messages_storage[chat_id] = {}
                    
                    for topic_id_str, messages in topics.items():
                        topic_id = int(topic_id_str)
                        self.messages_storage[chat_id][topic_id] = messages
                        total += len(messages)
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {total} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {filename}")
                return total
            return 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ {filename}: {e}")
            return 0

    def save_messages_to_json(self, filename: str = 'history.json') -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.messages_storage, f, ensure_ascii=False, indent=2)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {filename}: {e}")
            return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON"""
        if not update.message or not update.message.chat:
            return

        chat_id = update.message.chat.id
        if chat_id not in self.groups_dict:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º topic_id (0 - –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç)
        topic_id = getattr(update.message, 'message_thread_id', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ø–∏–∫ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç)
        if topic_id != 0 and topic_id not in [t['id'] for t in self.groups_dict[chat_id].get('topics', [])]:
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'id': update.message.message_id,
            'text': update.message.text or update.message.caption or "",
            'user_id': update.message.from_user.id if update.message.from_user else None,
            'username': update.message.from_user.username if update.message.from_user else None,
            'first_name': update.message.from_user.first_name if update.message.from_user else None,
            'timestamp': update.message.date.isoformat(),
            'chat_id': chat_id,
            'topic_id': topic_id,
            'topic_name': next(
                (t['name'] for t in self.groups_dict[chat_id].get('topics', []) if t['id'] == topic_id),
                '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç'
            )
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if chat_id not in self.messages_storage:
            self.messages_storage[chat_id] = {}
        if topic_id not in self.messages_storage[chat_id]:
            self.messages_storage[chat_id][topic_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.messages_storage[chat_id][topic_id].append(message_data)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {chat_id}/{topic_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —á–∞—Å—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        self.save_messages_to_json()

    async def create_summary(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            time_threshold = datetime.now(timezone.utc) - timedelta(hours=24)
            analysis_messages = []
            
            for chat_id, topics in self.messages_storage.items():
                for topic_id, messages in topics.items():
                    for msg in messages:
                        try:
                            msg_time = datetime.fromisoformat(msg['timestamp'])
                            if msg_time.tzinfo is None:
                                msg_time = msg_time.replace(tzinfo=timezone.utc)
                            
                            if msg_time > time_threshold and msg['text'].strip():
                                analysis_messages.append({
                                    'text': msg['text'],
                                    'user': msg.get('username') or msg.get('first_name') or f"user_{msg['user_id']}",
                                    'time': msg['timestamp'],
                                    'topic': msg.get('topic_name', '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç')
                                })
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            if not analysis_messages:
                logger.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat
            prompt = self._create_summary_prompt(analysis_messages)
            return await self.giga_client.get_summary(prompt)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return None

    def _create_summary_prompt(self, messages: List[Dict]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏"""
        messages_text = "\n".join(
            f"[{msg['topic']}] {msg['user']}: {msg['text']}"
            for msg in messages[-self.max_messages:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        )

        return f"""
–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
1. –í—ã–¥–µ–ª–∏ 3-5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º
2. –û—Ç–º–µ—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã
3. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
5. –Ø–∑—ã–∫: {self.language}
6. –§–æ—Ä–º–∞—Ç: Markdown

**–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages)}):**
{messages_text}

**–§–æ—Ä–º–∞—Ç —Å–≤–æ–¥–∫–∏:**
# üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({datetime.now().strftime('%d.%m.%Y')})

## üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã
- ...

## üí¨ –í–∞–∂–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
- ...

## üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- ...

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}
- –ì—Ä—É–ø–ø: {len(self.messages_storage)}
- –¢–æ–ø–∏–∫–æ–≤: {sum(len(topics) for topics in self.messages_storage.values())}
"""

    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        summary = await self.create_summary()
        if not summary:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")
            return

        for group_id in self.groups_dict:
            try:
                await self.application.bot.send_message(
                    chat_id=group_id,
                    text=summary,
                    parse_mode='Markdown'
                )
                logger.info(f"–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {group_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {group_id}: {e}")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self._command_start),
            CommandHandler("summary", self._command_summary),
            CommandHandler("save", self._command_save),
            MessageHandler(filters.ALL, self.handle_message)
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    async def _command_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/summary - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å\n"
            "/save - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

    async def _command_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary"""
        await update.message.reply_text("‚åõ –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É...")
        summary = await self.create_summary()
        if summary:
            await update.message.reply_text(summary, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")

    async def _command_save(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save"""
        if self.save_messages_to_json():
            await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    def schedule_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        schedule.every().day.at(self.summary_time).do(
            lambda: asyncio.create_task(self.send_daily_summary())
        )
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {self.summary_time}")

    async def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while True:
            schedule.run_pending()
            await asyncio.sleep(60)

    async def start(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        self.schedule_tasks()

        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.run_scheduler())

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

async def main():
    bot = TelegramSummaryBot()
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())