import asyncio
import logging
import schedule
import time
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Union
import json

from telegram import Update, Bot
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters
from telegram.error import TelegramError

from config import CONFIG
from gigachat_client import GigaChatClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramSummaryBot:
    def __init__(self):
        self.config = CONFIG
        self.bot_token = self.config["token"]["telegram"]
        self.groups_config = self.config.get("groups", [])
        self.max_messages = self.config["bot"]["max_messages_per_group"]
        self.summary_time = self.config["bot"]["summary_time"]
        self.language = self.config["bot"]["summary_language"]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {group_id: {topic_id: [messages]}}
        self.messages_storage: Dict[int, Dict[int, List[Dict]]] = {}
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.groups_dict = {}
        for group in self.groups_config:
            group_id = group["id"]
            self.groups_dict[group_id] = group
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            if group_id not in self.messages_storage:
                self.messages_storage[group_id] = {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–ø–∏–∫–∞
            for topic in group.get("topics", []):
                topic_id = topic["id"]
                if topic_id not in self.messages_storage[group_id]:
                    self.messages_storage[group_id][topic_id] = []
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø (–±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤) –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 0
            if not group.get("topics"):
                if 0 not in self.messages_storage[group_id]:
                    self.messages_storage[group_id][0] = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat –∫–ª–∏–µ–Ω—Ç–∞
        self.giga_client = GigaChatClient()
        
        # Application –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –º–µ—Ç–æ–¥–µ start
        self.application = None
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.application:
            return
            
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("summary", self.manual_summary))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("topics", self.topics_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/summary - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/topics - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø–∏–∫–∏"
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø –∏ —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –≤ 9:00
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GigaChat
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–≥—Ä—É–ø–ø —Å —Ç–æ–ø–∏–∫–∞–º–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/summary - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/topics - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø–∏–∫–∏

**–ù–∞—Å—Ç—Ä–æ–π–∫–∞:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—ã
2. –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø –∏ —Ç–æ–ø–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π

**–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã:**
1. –î–æ–±–∞–≤—å—Ç–µ @userinfobot –≤ –≥—Ä—É–ø–ø—É
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
3. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç ID –≥—Ä—É–ø–ø—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∏–Ω—É—Å–∞)

**–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ–ø–∏–∫–∞:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @RawDataBot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è message_thread_id
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def topics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /topics - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø–∏–∫–∏"""
        topics_text = "üìã **–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ —Ç–æ–ø–∏–∫–∏:**\n\n"
        
        for group in self.groups_config:
            group_id = group["id"]
            group_name = group.get("name", f"–ì—Ä—É–ø–ø–∞ {group_id}")
            topics = group.get("topics", [])
            
            topics_text += f"**{group_name}** (ID: {group_id})\n"
            
            if topics:
                for topic in topics:
                    topic_id = topic["id"]
                    topic_name = topic["name"]
                    message_count = len(self.messages_storage.get(group_id, {}).get(topic_id, []))
                    topics_text += f"  ‚Ä¢ {topic_name} (ID: {topic_id}) - {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                message_count = len(self.messages_storage.get(group_id, {}).get(0, []))
                topics_text += f"  ‚Ä¢ –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ - {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            topics_text += "\n"
        
        await update.message.reply_text(topics_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        total_messages = 0
        groups_count = 0
        topics_count = 0
        
        for group_id, topics_data in self.messages_storage.items():
            groups_count += 1
            for topic_id, messages in topics_data.items():
                topics_count += 1
                total_messages += len(messages)
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø:** {groups_count}
**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ø–∏–∫–æ–≤:** {topics_count}
**–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_messages}
**–í—Ä–µ–º—è —Å–≤–æ–¥–∫–∏:** {self.summary_time}
**–Ø–∑—ã–∫:** {self.language}

**–ì—Ä—É–ø–ø –≤ –∫–æ–Ω—Ñ–∏–≥–µ:** {len(self.groups_config)}
        """
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def manual_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤—Ä—É—á–Ω—É—é"""
        await update.message.reply_text("üìù –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É...")
        
        try:
            summary = await self.create_summary()
            if summary:
                await update.message.reply_text(summary, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
        if not update.message or not update.message.chat:
            return
        
        chat_id = update.message.chat.id
        message_thread_id = update.message.message_thread_id if hasattr(update.message, 'message_thread_id') else None
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —á–∞—Ç {chat_id}, —Ç–æ–ø–∏–∫ {message_thread_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
        if chat_id not in self.groups_dict:
            logger.info(f"‚ùå –ì—Ä—É–ø–ø–∞ {chat_id} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return
        
        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        
        group_config = self.groups_dict[chat_id]
        topics = group_config.get("topics", [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º topic_id
        topic_id = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
        topic_name = "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        
        if topics and message_thread_id:
            # –ò—â–µ–º —Ç–æ–ø–∏–∫ –ø–æ message_thread_id
            for topic in topics:
                if topic["id"] == message_thread_id:
                    topic_id = message_thread_id
                    topic_name = topic["name"]
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–ø–∏–∫: {topic_name} (ID: {topic_id})")
                    break
            else:
                # –¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.info(f"‚ö†Ô∏è  –¢–æ–ø–∏–∫ {message_thread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –≥—Ä—É–ø–ø—ã {chat_id}")
                return
        elif topics and not message_thread_id:
            # –í –º—É–ª—å—Ç–∏–≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–æ–ø–∏–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            logger.info(f"‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–æ–ø–∏–∫–∞ –≤ –º—É–ª—å—Ç–∏–≥—Ä—É–ø–ø–µ {chat_id}")
            return
        else:
            logger.info(f"‚úÖ –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º topic_id = 0")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            'id': update.message.message_id,
            'text': update.message.text or update.message.caption or "",
            'user_id': update.message.from_user.id if update.message.from_user else None,
            'username': update.message.from_user.username if update.message.from_user else None,
            'first_name': update.message.from_user.first_name if update.message.from_user else None,
            'timestamp': update.message.date.isoformat(),
            'chat_id': chat_id,
            'topic_id': topic_id,
            'topic_name': topic_name
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if chat_id not in self.messages_storage:
            self.messages_storage[chat_id] = {}
        if topic_id not in self.messages_storage[chat_id]:
            self.messages_storage[chat_id][topic_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.messages_storage[chat_id][topic_id].append(message_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.messages_storage[chat_id][topic_id]) > self.max_messages:
            self.messages_storage[chat_id][topic_id] = self.messages_storage[chat_id][topic_id][-self.max_messages:]
        
        logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ {chat_id}, —Ç–æ–ø–∏–∫ {topic_name}. –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.messages_storage[chat_id][topic_id])}")
        logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data['text'][:100]}...")
    
    async def create_summary(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏...")
        logger.info(f"üìä –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_storage}")
        
        if not self.messages_storage:
            logger.warning("‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–æ–µ")
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        all_messages = []
        for chat_id, topics_data in self.messages_storage.items():
            group_config = self.groups_dict.get(chat_id, {})
            group_name = group_config.get("name", f"–ì—Ä—É–ø–ø–∞ {chat_id}")
            
            logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É: {group_name} (ID: {chat_id})")
            
            for topic_id, messages in topics_data.items():
                topic_name = "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
                if topic_id != 0:
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
                    for topic in group_config.get("topics", []):
                        if topic["id"] == topic_id:
                            topic_name = topic["name"]
                            break
                
                logger.info(f"  üìù –¢–æ–ø–∏–∫ {topic_name}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                for msg in messages:
                    if msg['text'].strip():  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        all_messages.append({
                            'group': group_name,
                            'topic': topic_name,
                            'text': msg['text'],
                            'user': msg['username'] or msg['first_name'] or f"User{msg['user_id']}",
                            'time': msg['timestamp']
                        })
        
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(all_messages)}")
        
        if not all_messages:
            logger.warning("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat
        prompt = self.create_summary_prompt(all_messages)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –æ—Ç GigaChat
            logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ GigaChat...")
            summary = await self.giga_client.get_summary(prompt)
            
            if summary:
                logger.info("‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                return summary
            else:
                logger.error("‚ùå GigaChat –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –æ—Ç GigaChat: {e}")
            return None
    
    def create_summary_prompt(self, messages: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GigaChat"""
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–≤—Å–µ –≤ UTC)
        yesterday = datetime.now(timezone.utc) - timedelta(days=1)
        recent_messages = []
        for msg in messages:
            msg_time = datetime.fromisoformat(msg['time'])
            if msg_time.tzinfo is None:
                # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Ä–µ–º—è –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
                msg_time = msg_time.replace(tzinfo=timezone.utc)
            if msg_time > yesterday:
                recent_messages.append(msg)
        
        if not recent_messages:
            recent_messages = messages[-50:]  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        messages_text = ""
        for msg in recent_messages:
            messages_text += f"[{msg['group']} - {msg['topic']}] {msg['user']}: {msg['text']}\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Ç–æ–ø–∏–∫–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        groups_topics = {}
        for msg in recent_messages:
            group = msg['group']
            topic = msg['topic']
            if group not in groups_topics:
                groups_topics[group] = {}
            if topic not in groups_topics[group]:
                groups_topics[group][topic] = 0
            groups_topics[group][topic] += 1
        
        stats_text = ""
        for group, topics in groups_topics.items():
            stats_text += f"- {group}:\n"
            for topic, count in topics.items():
                stats_text += f"  ‚Ä¢ {topic}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –≥—Ä—É–ø–ø –∏ —Ç–æ–ø–∏–∫–æ–≤.

**–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
{messages_text}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Ç–æ–ø–∏–∫–∞–º:**
{stats_text}

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–æ–¥–∫–µ:**
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º –∏ —Å–æ–±—ã—Ç–∏–π
2. –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
3. –ö—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
4. –Ø–∑—ã–∫: {self.language}
5. –§–æ—Ä–º–∞—Ç: Markdown
6. –£—á–∏—Ç—ã–≤–∞–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–ø–∏–∫–∞–º

**–°–æ–∑–¥–∞–π —Å–≤–æ–¥–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:**
# üìä –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã
[—Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Ç–æ–ø–∏–∫–∞–º]

## üìù –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
[–≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è]

## üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
[–∑–∞—Å–ª—É–∂–∏–≤–∞—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏]

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(recent_messages)}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(groups_topics)}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–∏–∫–æ–≤: {sum(len(topics) for topics in groups_topics.values())}
- –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        """
        
        return prompt
    
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            summary = await self.create_summary()
            if summary:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã
                for group in self.groups_config:
                    chat_id = group["id"]
                    try:
                        await self.application.bot.send_message(
                            chat_id=chat_id,
                            text=summary,
                            parse_mode='Markdown'
                        )
                        logger.info(f"–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
                    except TelegramError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.clear_old_messages()
            else:
                logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    def clear_old_messages(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)"""
        week_ago = datetime.now(timezone.utc) - timedelta(days=7)
        
        for chat_id in list(self.messages_storage.keys()):
            for topic_id in list(self.messages_storage[chat_id].keys()):
                self.messages_storage[chat_id][topic_id] = [
                    msg for msg in self.messages_storage[chat_id][topic_id]
                    if datetime.fromisoformat(msg['timestamp']).replace(tzinfo=timezone.utc) > week_ago
                ]
                
                # –ï—Å–ª–∏ –≤ —Ç–æ–ø–∏–∫–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if not self.messages_storage[chat_id][topic_id]:
                    del self.messages_storage[chat_id][topic_id]
            
            # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ø–∏–∫–æ–≤, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if not self.messages_storage[chat_id]:
                del self.messages_storage[chat_id]
    
    def schedule_daily_summary(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        schedule.every().day.at(self.summary_time).do(
            lambda: asyncio.create_task(self.send_daily_summary())
        )
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {self.summary_time}")
    
    async def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while True:
            schedule.run_pending()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram Summary Bot...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Application
        self.application = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        self.schedule_daily_summary()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(self.run_scheduler())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramSummaryBot()
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main()) 